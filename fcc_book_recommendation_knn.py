# -*- coding: utf-8 -*-
"""fcc_book_recommendation_knn.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/github/freeCodeCamp/boilerplate-book-recommendation-engine/blob/master/fcc_book_recommendation_knn.ipynb
"""

# import libraries (you may add additional imports but you may not have to)
import pandas as pd
from scipy.sparse import csr_matrix
from sklearn.neighbors import NearestNeighbors


books_filename = 'BX-Books.csv'
ratings_filename = 'BX-Book-Ratings.csv'

# import csv data into dataframes
df_books = pd.read_csv(
    books_filename,
    encoding = "ISO-8859-1",
    sep=";",
    header=0,
    names=['isbn', 'title', 'author'],
    usecols=['isbn', 'title', 'author'],
    dtype={'isbn': 'str', 'title': 'str', 'author': 'str'})

df_ratings = pd.read_csv(
    ratings_filename,
    encoding = "ISO-8859-1",
    sep=";",
    header=0,
    names=['user', 'isbn', 'rating'],
    usecols=['user', 'isbn', 'rating'],
    dtype={'user': 'int32', 'isbn': 'str', 'rating': 'float32'})

# add your code here - consider creating a new cell for each section of code
# filter dataset
df_counts_user = df_ratings['user'].value_counts()
df_counts_book = df_ratings['isbn'].value_counts()

df_ratings = df_ratings[df_ratings['user'].isin(df_counts_user[df_counts_user >= 200].index)]
df_ratings = df_ratings[df_ratings['isbn'].isin(df_counts_book[df_counts_book >= 100].index)]

# merge ratings with book titles
df = df_ratings.merge(df_books, on='isbn')

# create pivot table
df_grouped = df.groupby(['title', 'user'])['rating'].mean().reset_index()
df_pivot = df_grouped.pivot(index='title', columns='user', values='rating').fillna(0)
# create sparse matrix
matrix = csr_matrix(df_pivot.values)

# fit KNN model
knn = NearestNeighbors(metric='cosine', algorithm='brute', n_neighbors=6, n_jobs=-1)
knn.fit(matrix)

title_to_index = {title: i for i, title in enumerate(df_pivot.index)}
index_to_title = {i: title for title, i in title_to_index.items()}

# function to return recommended books - this will be tested
def get_recommends(book = ""):
  recommended_books = []
  if book not in title_to_index:
    return "Book not found in the database."
  # Find index and vector for the book
  book_index = title_to_index[book]
  idx_vector = matrix[book_index]

  # Query KNN for the NN
  distances, indices = knn.kneighbors(idx_vector, n_neighbors=6)
  recommended_books.append(book)
  recommended_books.append([])
  for i in range(1, len(distances.flatten())):
    recommended_books[1].append([index_to_title[indices.flatten()[i]], distances.flatten()[i]])

  #sort list by distance
  recommended_books[1].sort(key=lambda x: x[1], reverse=True)
  return recommended_books

books = get_recommends("Where the Heart Is (Oprah's Book Club (Paperback))")
print(books)

def test_book_recommendation():
  test_pass = True
  recommends = get_recommends("Where the Heart Is (Oprah's Book Club (Paperback))")
  if recommends[0] != "Where the Heart Is (Oprah's Book Club (Paperback))":
    test_pass = False
  recommended_books = ["I'll Be Seeing You", 'The Weight of Water', 'The Surgeon', 'I Know This Much Is True']
  recommended_books_dist = [0.8, 0.77, 0.77, 0.77]
  for i in range(2):
    if recommends[1][i][0] not in recommended_books:
      test_pass = False
    if abs(recommends[1][i][1] - recommended_books_dist[i]) >= 0.05:
      test_pass = False
  if test_pass:
    print("You passed the challenge! 🎉🎉🎉🎉🎉")
  else:
    print("You haven't passed yet. Keep trying!")

test_book_recommendation()